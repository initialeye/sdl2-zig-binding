const C = @import("sdl2-c-binding.zig");

pub extern fn TTF_Linked_Version() [*c]const C.SDL_version;
pub extern fn TTF_ByteSwappedUNICODE(swapped: c_int) void;
pub const struct__TTF_Font = opaque {};
pub const TTF_Font = struct__TTF_Font;
pub extern fn TTF_Init() c_int;
pub extern fn TTF_OpenFont(file: [*c]const u8, ptsize: c_int) ?*TTF_Font;
pub extern fn TTF_OpenFontIndex(file: [*c]const u8, ptsize: c_int, index: c_long) ?*TTF_Font;
pub extern fn TTF_OpenFontRW(src: [*c]C.SDL_RWops, freesrc: c_int, ptsize: c_int) ?*TTF_Font;
pub extern fn TTF_OpenFontIndexRW(src: [*c]C.SDL_RWops, freesrc: c_int, ptsize: c_int, index: c_long) ?*TTF_Font;
pub extern fn TTF_GetFontStyle(font: ?*const TTF_Font) c_int;
pub extern fn TTF_SetFontStyle(font: ?*TTF_Font, style: c_int) void;
pub extern fn TTF_GetFontOutline(font: ?*const TTF_Font) c_int;
pub extern fn TTF_SetFontOutline(font: ?*TTF_Font, outline: c_int) void;
pub extern fn TTF_GetFontHinting(font: ?*const TTF_Font) c_int;
pub extern fn TTF_SetFontHinting(font: ?*TTF_Font, hinting: c_int) void;
pub extern fn TTF_FontHeight(font: ?*const TTF_Font) c_int;
pub extern fn TTF_FontAscent(font: ?*const TTF_Font) c_int;
pub extern fn TTF_FontDescent(font: ?*const TTF_Font) c_int;
pub extern fn TTF_FontLineSkip(font: ?*const TTF_Font) c_int;
pub extern fn TTF_GetFontKerning(font: ?*const TTF_Font) c_int;
pub extern fn TTF_SetFontKerning(font: ?*TTF_Font, allowed: c_int) void;
pub extern fn TTF_FontFaces(font: ?*const TTF_Font) c_long;
pub extern fn TTF_FontFaceIsFixedWidth(font: ?*const TTF_Font) c_int;
pub extern fn TTF_FontFaceFamilyName(font: ?*const TTF_Font) [*c]u8;
pub extern fn TTF_FontFaceStyleName(font: ?*const TTF_Font) [*c]u8;
pub extern fn TTF_GlyphIsProvided(font: ?*const TTF_Font, ch: u16) c_int;
pub extern fn TTF_GlyphMetrics(font: ?*TTF_Font, ch: u16, minx: [*c]c_int, maxx: [*c]c_int, miny: [*c]c_int, maxy: [*c]c_int, advance: [*c]c_int) c_int;
pub extern fn TTF_SizeText(font: ?*TTF_Font, text: [*c]const u8, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn TTF_SizeUTF8(font: ?*TTF_Font, text: [*c]const u8, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn TTF_SizeUNICODE(font: ?*TTF_Font, text: [*c]const u16, w: [*c]c_int, h: [*c]c_int) c_int;
pub extern fn TTF_RenderText_Solid(font: ?*TTF_Font, text: [*c]const u8, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderUTF8_Solid(font: ?*TTF_Font, text: [*c]const u8, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderUNICODE_Solid(font: ?*TTF_Font, text: [*c]const u16, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderGlyph_Solid(font: ?*TTF_Font, ch: u16, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderText_Shaded(font: ?*TTF_Font, text: [*c]const u8, fg: C.SDL_Color, bg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderUTF8_Shaded(font: ?*TTF_Font, text: [*c]const u8, fg: C.SDL_Color, bg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderUNICODE_Shaded(font: ?*TTF_Font, text: [*c]const u16, fg: C.SDL_Color, bg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderGlyph_Shaded(font: ?*TTF_Font, ch: u16, fg: C.SDL_Color, bg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderText_Blended(font: ?*TTF_Font, text: [*c]const u8, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderUTF8_Blended(font: ?*TTF_Font, text: [*c]const u8, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderUNICODE_Blended(font: ?*TTF_Font, text: [*c]const u16, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_RenderGlyph_Blended(font: ?*TTF_Font, ch: u16, fg: C.SDL_Color) [*c]C.SDL_Surface;
pub extern fn TTF_CloseFont(font: ?*TTF_Font) void;
pub extern fn TTF_Quit() void;
pub extern fn TTF_WasInit() c_int;
pub extern fn TTF_GetFontKerningSize(font: ?*TTF_Font, prev_index: c_int, index: c_int) c_int;
